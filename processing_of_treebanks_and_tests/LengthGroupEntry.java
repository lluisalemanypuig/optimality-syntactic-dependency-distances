/*******************************************************************************
 * Optimality Syntactic Dependency Distances
 *  
 * Copyright (C) 2020 Carlos Gómez Rodríguez
 *
 * This file is part of Optimality Syntactic Dependency Distances.
 *  
 *  Optimality Syntactic Dependency Distances is free software: you can redistribute
 *  it and/or modify it under the terms of the GNU Affero General Public License
 *  as published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *  
 *  Optimality Syntactic Dependency Distances is distributed in the hope that
 *  it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
 *  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Affero General Public License for more details.
 *   
 *  You should have received a copy of the GNU Affero General Public License
 *  along with Optimality Syntactic Dependency Distances.  
 *  If not, see <http://www.gnu.org/licenses/>.
 *  
 *  Contact:
 *       
 *      Carlos Gómez Rodríguez (carlos.gomez@udc.es)
 *          LyS Research Group (Grupo de investigación Lengua y Sociedad de la Información)
 *          FASTPARSE Lab (Fast Natural Language Processing for Large-Scale NLP).
 *          Office 0.19 Facultade de Informática     Elviña, 15071 A Coruña.    GALICIA, SPAIN
 *          Webpage: http://www.grupolys.org/~cgomezr/
 *          
 *******************************************************************************/
import java.util.StringTokenizer;


/**
 * An entry about the metrics related to a sentence length group in a treebank, read from a file generated by read_heads.cpp
 * (either by compute_detailed_metrics or compute_optimality_detailed_metrics)
 * @author carlos_gomez
 *
 */
public class LengthGroupEntry
{

	int length;
	int nSentences;
	
	/**
	 * Obtain the sentence length
	 * @return
	 */
	public int getLength() 
	{
		return length;
	}

	public void setLength(int length) 
	{
		this.length = length;
	}

	public int getNSentences() 
	{
		return nSentences;
	}

	public void setNSentences(int nSentences) 
	{
		this.nSentences = nSentences;
	}
	
	public double[] getMetrics()
	{
		return metrics;
	}
	
	/*
	double avgD;
	double medD;
	double devD;
	
	double avgDMin;
	double medDMin;
	double devDMin;
	
	double avgDRandom;
	double medDRandom;
	double devDRandom;
	
	double avgOmega;
	double medOmega;
	double devOmega;
	*/
	
	double[] metrics; //the metrics above
	
	public LengthGroupEntry ( String line , int numMetrics )
	{
		metrics = new double[numMetrics];
		StringTokenizer st = new StringTokenizer(line," ");
		st.nextToken(); //irrelevant
		length = Integer.valueOf(st.nextToken()); //length
		nSentences = Integer.valueOf(st.nextToken()); //#sentences
		st.nextToken(); //length again
		st.nextToken(); //length again
		st.nextToken(); //irrelevant (stdev of length, always 0)
		for ( int i = 0 ; i < metrics.length ; i++ )
		{
			metrics[i] = Double.valueOf(st.nextToken());
		}
	}
	
	public LengthGroupEntry ( String line )
	{
		this(line,12); /*12 is the value required for lines generated by compute_optimality_detailed_metrics*/
		/*33 for compute_detailed_metrics*/
	}
	
	public String toString()
	{
		StringBuffer sb = new StringBuffer();
		sb.append(length);
		sb.append(" ");
		sb.append(nSentences);
		for ( int i = 0 ; i < metrics.length ; i++ )
		{
			sb.append(" ");
			sb.append(metrics[i]);
		}
		return sb.toString();
	}
	
}